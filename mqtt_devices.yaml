# mqtt_devices.yaml
#
# Copyright (C) 2021-2022 Kedron Holdings LLC, All Rights Reserved
# This file is part of Reactor.
#
# *** IMPORTANT ***
# This is a system file. DO NOT place overrides or make modifications here.
# You can add your own templates by adding a "templates" section to a file
# named local_mqtt_devices.yaml in your config directory.
---
version: 22284
revision: 1
format: 1

templates:
  # tasmota_generic_relay
  # This template allows you to map any one of the relays possible in Sonoff Basic to an entity
  # that looks like a switch (capabilities power_switch and toggle).
  # Requires: topic, unit (specify unit as empty string if not used by device)
  tasmota_generic_relay:
    type: Switch
    capabilities: ['power_switch', 'toggle']
    primary_attribute: power_switch.state
    query: "cmnd/%topic%/POWER%unit%"
    events:
      "stat/%topic%/RESULT":
        "power_switch.state":
          json_payload: true
          if_expr: '! isnull( payload?[ "POWER" + str(unit) ] )'
          expr: 'upper( payload[ "POWER" + str(unit) ] ) == "ON"'
      "stat/%topic%/POWER%unit%":
        "power_switch.state":
          expr: 'upper(payload) == "ON"'
      "tele/%topic%/STATE":
        "power_switch.state":
          json_payload: true
          if_expr: '! isnull( payload?[ "POWER" + str(unit) ] )'
          expr: 'upper( payload[ "POWER" + str(unit) ] ) == "ON"'
    actions:
      power_switch:
        "on":
          topic: "cmnd/%topic%/POWER%unit%"
          payload: "on"
        "off":
          topic: "cmnd/%topic%/POWER%unit%"
          payload: "off"
        set:
          topic: "cmnd/%topic%/POWER%unit%"
          payload:
            expr: "parameters.state ? 'on' : 'off'"
            type: raw
      toggle: "cmnd/%topic%/POWER%unit% toggle"

  # tasmota_detached_button
  # Maps a button in detached state (e.g. after SetOption73 enabled) to a button entity.
  # Note that if SetOption73 has not been enabled, buttons are usually tied to relays
  # and button press information is not reported for them, so it is required for this
  # template that SetOption73 be enabled. This detaches the buttons from the relays, so
  # it is then necessary for external forces to turn button presses into relay changes if
  # that is what is needed/desired.
  # Requires: topic, unit (specify unit as empty string if not used by device)
  tasmota_detached_button:
    type: Button
    capabilities: [button]
    primary_attribute: button.state
    events:
      "stat/%topic%/RESULT":
        "button.state":
          json_payload: true
          if_expr: '! isnull( payload[ "Button" + str(unit) ] )'
          expr: >
            s=lower( payload[ "Button" + str(unit) ]?.Action ?? 'unknown'),
            ({'quad':'4','penta':'5'})[s] ?? s
        "button.since":
          json_payload: true
          if_expr: '! isnull( payload[ "Button" + str(unit) ] )'
          expr: 'time()'

  # tasmota_detached_switch_mode0 (SetOption114 enabled, SwitchMode 0)
  # Maps a SWITCH in mode 0 (toggle). It's mapped as a button that only has "single" press.
  # Requires: topic, unit (specify unit as empty string if not used by device)
  tasmota_detached_switch_mode0:
    type: Button
    capabilities: [button]
    primary_attribute: button.state
    events:
      "stat/%topic%/RESULT":
        "button.state": "single"
        "button.since":
          json_payload: true
          if_expr: '"toggle" == lower( payload[ "Switch" + str(unit) ]?.Action ?? "" )'
          expr: 'time()'

  # tasmota_detached_switch_mode1 (SetOption114 enabled, SwitchMode 1)
  # Maps a SWITCH in mode 1 (on/off). Reports binary state.
  # Requires: topic, unit (specify unit as empty string if not used by device)
  tasmota_detached_switch_mode1:
    type: BinarySensor
    capabilities: [binary_sensor]
    primary_attribute: binary_sensor.state
    query: "cmnd/%topic%/STATE"
    events:
      "stat/%topic%/RESULT":
        "binary_sensor.state":
          json_payload: true
          if_expr: '! isnull( payload[ "Switch" + str(unit) ]?.Action )'
          expr: '"on" == lower( payload[ "Switch" + str(unit) ].Action )'

  # tasmota_sensor_temperature_humidity
  # Temperature and humidity (in one entity) using temperature/humdity sensor
  # report. Use SetOption8 to set units for report (default 0=C, 1=F).
  # Requires: topic
  # Optional: source (default: Global)
  tasmota_sensor_temperature_humidity:
    type: ValueSensor
    capabilities: [temperature_sensor, humidity_sensor]
    primary_attribute: temperature_sensor.value
    query: "cmnd/%topic%/STATE"
    events:
      "tele/%topic%/SENSOR":
        "temperature_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Temperature'
        "temperature_sensor.units":
          json_payload: true
          if_expr: '! isnull( payload?.TempUnit )'
          expr: payload.TempUnit
        "humidity_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Humidity'
        "humidity_sensor.units": "%"

  # tasmota_sensor_temperature
  # Temperature (in its own entity) using temperature/humdity sensor
  # report. Use SetOption8 to set units for report (default 0=C, 1=F).
  # Requires: topic
  # Optional: source (default: Global)
  tasmota_sensor_temperature:
    type: ValueSensor
    capabilities: [temperature_sensor]
    primary_attribute: temperature_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "temperature_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Temperature'
        "temperature_sensor.units":
          json_payload: true
          if_expr: '! isnull( payload?.TempUnit )'
          expr: payload.TempUnit

  # tasmota_sensor_humidity
  # Humidity (in its own entity) using temperature/humdity sensor
  # report.
  # Requires: topic
  # Optional: source (default: Global)
  tasmota_sensor_humidity:
    type: ValueSensor
    capabilities: [humidity_sensor]
    primary_attribute: humidity_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "humidity_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Humidity'
        "humidity_sensor.units": "%"

  # tasmota_sensor_co2
  # Requires: topic, source
  tasmota_sensor_co2:
    type: ValueSensor
    capabilities: [value_sensor]
    primary_attribute: value_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "value_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "MHZ19B" ]?.CarbonDioxide'

  # tasmota_sensor_battery
  # Requires: topic, source
  tasmota_sensor_battery:
    type: ValueSensor
    capabilities: [value_sensor]
    primary_attribute: value_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "value_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Battery'

  # tasmota_sensor_rssi
  # Requires: topic, source
  tasmota_sensor_rssi:
    type: ValueSensor
    capabilities: [value_sensor]
    primary_attribute: value_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "value_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.RSSI'
      "tele/%topic%/STATE":
        "value_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?.Wifi?.RSSI )'
          expr: 'payload.Wifi.RSSI'

  # tasmota_sensor_dewpoint
  # Requires: topic, source
  tasmota_sensor_dewpoint:
    type: ValueSensor
    capabilities: [temperature_sensor]
    primary_attribute: temperature_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "temperature_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.DewPoint'
        "temperature_sensor.units":
          json_payload: true
          if_expr: '! isnull( payload?.TempUnit )'
          expr: payload.TempUnit

  # tasmota_sensor_flora - Contributed by @Crille
  # Mi Flora plant sensor for Temperature, Illuminance, Moisture and Fertility
  # Requires: topic
  # Optional: source (default Global)
  tasmota_sensor_flora:
    type: ValueSensor
    capabilities: [temperature_sensor, light_sensor, humidity_sensor, value_sensor]
    primary_attribute: humidity_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "temperature_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload?[source ?? "Global"]?.Temperature'
        "temperature_sensor.units":
          json_payload: true
          if_expr: '! isnull( payload?.TempUnit )'
          expr: 'payload.TempUnit'
        "humidity_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload?[source ?? "Global"]?.Moisture'
        "humidity_sensor.units": "%"
        "light_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload?[source ?? "Global"]?.Illuminance'
        "light_sensor.units": "lux"
        "value_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload?[source ?? "Global"]?.Fertility'
        "value_sensor.units": "ÂµS/cm"

  # owntracks_in_region
  # Receive OwnTracks location updates and drive a binary sensor that tells if a designated device
  # is in a given region or not (e.g. is Dad home?). The topic is the "Device ID" configured in the
  # OwnTracks app (under Identification). The regionName is the name of a region defined in the app.
  # Requires: topic, regionName; optional user.
  owntracks_in_region:
    capabilities: [ binary_sensor ]
    primary_attribute: binary_sensor.state
    type: BinarySensor
    events:
      "owntracks/%user:user%/%topic%":
        "binary_sensor.state":
          json_payload: true
          if_expr: "payload._type == 'location'"
          expr: >
            ( first reg in ( payload.inregions ?? [] ) with reg == regionName: true ) ?? false

  # --------------- Shelly Templates ---------------------------------------------------------------
  # Ref: https://shelly-api-docs.shelly.cloud/gen1/#shelly-family-overview

  # shelly_relay
  shelly_relay:
    type: Switch
    capabilities: ['power_switch', 'toggle']
    primary_attribute: power_switch.state
    events:
      "shellies/%topic%/relay/%channel%":
        "power_switch.state":
          expr: 'payload == "on"'
    actions:
      power_switch:
        "on":
          topic: "shellies/%topic%/relay/%channel%/command"
          payload: "on"
        "off":
          topic: "shellies/%topic%/relay/%channel%/command"
          payload: "off"
        set:
          topic: "shellies/%topic%/relay/%channel%/command"
          payload:
            expr: "parameters.state ? 'on' : 'off'"
            type: raw
      # toggle.toggle is implemented by the default handler in MQTTController

  # shelly_input
  # Note that for the Shelly to send these topics, the button must be in detached mode
  shelly_input:
    type: Button
    capabilities: ['button']
    primary_attribute: button.state
    events:
      "shellies/%topic%/input/%channel%":
        "button.state":
          expr: 'bool(payload) ? "on" : "off"'
        "button.since":
          expr: 'time()'
      "shellies/%topic%/longpush/%channel%":
        "button.state":
          expr: 'bool(payload) ? "long" : "off"'
        "button.since":
          expr: 'time()'

  # shelly_temperature:
  shelly_temperature:
    type: ValueSensor
    capabilities: ['temperature_sensor']
    primary_attribute: temperature_sensor.value
    events:
      "shellies/%topic%/sensor/temperature":
        "temperature_sensor.value":
          expr: 'isNaN(payload) ? null : float(payload)'
        "temperature_sensor.units":
          expr: 'config.units'

  # shelly_humidity:
  shelly_humidity:
    type: ValueSensor
    capabilities: ['humidity_sensor']
    primary_attribute: humidity_sensor.value
    events:
      "shellies/%topic%/sensor/humidity":
        "temperature_sensor.value":
          expr: 'isNaN(payload) ? null : float(payload)'
        "temperature_sensor.units": "%"

  # shelly_battery
  shelly_battery:
    type: ValueSensor
    capabilities: ['battery_power']
    primary_attribute: battery_power.level
    events:
      "shellies/%topic%/sensor/battery":
        "battery_power.level":
          expr: 'float(payload) / 100'
        "battery_power.since":
          expr: 'time()'

  # shelly_power
  shelly_power:
    type: ValueSensor
    capabilities: ['power_sensor']
    primary_attribute: power_sensor.value
    events:
      "shellies/%topic%/relay/%unit%/power":
        "power_sensor.value":
          expr: 'float(payload)'
        "power_sensor.units": "W"

  # shelly_smoke:
  shelly_smoke:
    type: BinarySensor
    capabilities: ['smoke_detector']
    primary_attribute: smoke_detector.state
    events:
      "shellies/%topic%/smoke":
        "smoke_detector.state":
          expr: 'bool(payload)'

  # shelly_flood:
  shelly_flood:
    type: BinarySensor
    capabilities: ['leak_detector']
    primary_attribute: leak_detector.state
    events:
      "shellies/%topic%/flood":
        "leak_detector.state":
          expr: 'bool(payload)'

  # shelly_door_window:
  shelly_door_window:
    type: BinarySensor
    capabilities: ['door_sensor']
    primary_attribute: door_sensor.state
    events:
      "shellies/%topic%/state":
        "door_sensor.state":
          expr: 'bool(payload)'

  # shelly_tilt:
  shelly_tilt:
    type: ValueSensor
    capabilities: ['value_sensor']
    primary_attribute: value_sensor.state
    events:
      "shellies/%topic%/tilt":
        "value_sensor.value":
          expr: 'int(payload)'

  # shelly_vibration:
  shelly_vibration:
    type: BinarySensor
    capabilities: ['binary_sensor']
    primary_attribute: binary_sensor.state
    events:
      "shellies/%topic%/vibration":
        "binary_sensor.state":
          expr: 'bool(payload)'

  # shelly_motion
  shelly_motion:
    type: BinarySensor
    capabilities: ['motion_sensor', 'light_sensor', 'tamper']
    primary_attribute: motion_sensor.state
    events:
      "shellies/%topic%/status":
        "motion_sensor.state":
          json_payload: true
          expr: 'isnull(payload?.motion) ? null : bool(payload?.motion)'
        "motion_sensor.since":
          json_payload: true
          expr: 'isnull(payload?.timestamp) ? time() : int(payload.timestamp)'
        "light_sensor.value":
          json_payload: true
          expr: 'isnull(payload?.lux) ? null : int(payload?.lux)'
        "tamper.state":
          json_payload: true
          expr: 'isnull(payload?.vibration) ? null : bool(payload?.vibration)'
