# prism_solar.yaml
#
# Copyright (C) 2022-2025 Daniele Bochicchio, All Rights Reserved
# For updates see https://github.com/dbochicchio/reactor-mqtt-contrib
#
# *** IMPORTANT ***
# Every time you update the files, a restart is needed.
---
templates:
  # prism_solar: charger
  prism_solar_charger:
    type: ValueSensor
    capabilities: ["ev_charger", "power_switch", "toggle", "power_sensor", "energy_sensor", "voltage_sensor", "current_sensor"]
    primary_attribute: ev_charger.state
    requires: [topic, channel]
    description: "Prism Solar EV Charger device to handle the commands and get the current status"
    events:
      # power_sensor
      "%topic%/%channel%/w":
        "power_sensor.value":
          expr: "float(payload)"
        "power_sensor.units": "W"
        "x_mqtt_device.online": true

      # current_sensor
      "%topic%/%channel%/amp":
        "current_sensor.value":
          expr: "float(payload) / 1000"
        "current_sensor.units": "A"
        "x_mqtt_device.online": true

      # voltage_sensor
      "%topic%/%channel%/volt":
        "voltage_sensor.value":
          expr: "float(payload)"
        "voltage_sensor.units": "V"
        "x_mqtt_device.online": true

      # energy_sensor
      "%topic%/%channel%/wh_total":
        "energy_sensor.value":
          expr: "round(float(payload) * 0.001, 4)" # 1 Wh = 0.001 kWh - value * 0.001
        "energy_sensor.units": "KWH"
        "x_mqtt_device.online": true

      # ev_charger
      "%topic%/%channel%/state":
        "ev_charger.state":
          expr:  >
            payload == '1' ? 'not connected' : 
            payload == '2' || entity.attributes.ev_charger.mode == 3 ? 'ready' : 
            payload == '3' ? 'charging' : 
            entity.attributes.ev_charger.mode == 7 ? 'limited charging' :
            'suspended'
        "ev_charger.operating_state":
          expr:  >
            payload == '3' ? 'charge' : 
            'standby'
        "power_switch.state":
          expr: "payload == '2'"
        "x_mqtt_device.online": true

      "%topic%/%channel%/mode":
        "ev_charger.mode":
          expr: "int(payload)"
        "ev_charger.schedule":
          expr:  >
            payload == '1' ? 'solar' : 
            'normal'
        "x_mqtt_device.online": true

      "%topic%/%channel%/error":
        "ev_charger.error":
          expr: "int(payload)"
        "ev_charger.state":
          if_expr: "float(payload) != 0"
          expr: "fault"
          type: "raw"
        "x_mqtt_device.online": true

      "%topic%/%channel%/session_time":
        "ev_charger.duration":
          expr: "int(payload) * 1000" # from sec to millisecs
        "x_mqtt_device.online": true
        
    actions:
      power_switch:
        "on":
          topic: "%topic%/%channel%/command/set_mode"
          payload: "2" #normal
        "off":
          topic: "%topic%/%channel%/command/set_mode"
          payload: "3" #pause
        "set":
          topic: "%topic%/%channel%/command/set_mode"
          payload:
            expr: "parameters.state ? '2' : '3'"
      ev_charger:
        "set_current":
          topic: "%topic%/%channel%/command/set_current_limit"
          payload:
            expr: "float(parameters.limit)"
        "set_operating_mode":
          topic: "%topic%/%channel%/command/set_mode"
          payload:
            expr: "parameters.mode == 'charge' ? '2' : '1'"
        "set_schedule":
          topic: "%topic%/%channel%/command/set_mode"
          payload:
            expr:  >
                entity.attributes.ev_charger.mode != '3' ?
                (parameters.mode == 'solar' ? '1' : '2') : 
                '3'

  # prism_solar: current session
  prism_solar_session:
    type: ValueSensor
    capabilities: ["power_sensor", "energy_sensor", "current_sensor"]
    primary_attribute: power_sensor.value
    requires: [topic, channel]
    description: "Prism Solar EV Charger device to handle the charging session"
    events:
      # power_sensor
      "%topic%/%channel%/w":
        "power_sensor.value":
          expr: "float(payload)"
        "power_sensor.units": "W"
        "x_mqtt_device.online": true

      # energy_sensor
      "%topic%/%channel%/wh":
        "energy_sensor.value":
          expr: "round(float(payload) * 0.001, 4)" # 1 Wh = 0.001 kWh - value * 0.001
        "energy_sensor.units": "KWH"
        "x_mqtt_device.online": true

      # current_sensor
      "%topic%/%channel%/user_amp":
        "current_sensor.value":
          expr: "float(payload)"
        "current_sensor.units": "A"
        "x_mqtt_device.online": true