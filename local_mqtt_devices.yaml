templates:
  # Shelly HEM
  shelly_hem:
    type: ValueSensor
    capabilities: ['power_sensor', 'energy_sensor', 'voltage_sensor', 'current_sensor', 'power_factor_sensor', 'x_energy_sensor_exported']
    primary_attribute: power_sensor.value
    events:
      "shellies/%topic%/emeter/%channel%/power":
        "power_sensor.value":
          expr: 'float(payload)'
        "power_sensor.units": "W"
        "current_sensor.value":
          if_expr: '! isnull(payload) && ! isnull(entity.attributes.voltage_sensor.value)'
          expr: 'round(float(payload) / entity.attributes.voltage_sensor.value, 2)'
        "current_sensor.units": "A"
      "shellies/%topic%/emeter/%channel%/voltage":
        "voltage_sensor.value":
          expr: 'float(payload)'
        "voltage_sensor.units": "V"
        "current_sensor.value":
          if_expr: '! isnull(payload) && ! isnull(entity.attributes.power_sensor.value)'
          expr: 'round(entity.attributes.power_sensor.value / float(payload), 2)'
        "current_sensor.units": "A"
      "shellies/%topic%/emeter/%channel%/total":
        "energy_sensor.value":
          expr: 'round(float(payload) * 0.001, 4)' # 1 Wh = 0.001 kWh - value * 0.001
        "energy_sensor.units": "KWH"
      "shellies/%topic%/emeter/%channel%/total_returned":
        "x_energy_sensor_exported.value":
          expr: 'round(float(payload) * 0.001, 4)' # 1 Wh = 0.001 kWh - value * 0.001
        "x_energy_sensor_exported.units": "KWH"
      "shellies/%topic%/emeter/%channel%/pf":
        "power_factor_sensor.value":
          expr: 'float(payload)'

  # Shelly with detached inputs, mapped as binary sensor
  shelly_binary:
    type: BinarySensor
    capabilities: ['binary_sensor']
    primary_attribute: binary_sensor.state
    events:
      "shellies/%topic%/input/%channel%":
        "binary_sensor.state":
          expr: 'float(payload) == 1'

  # Shelly with external temp sensor
  shelly_exttemperature:
    type: ValueSensor
    capabilities: ['temperature_sensor']
    primary_attribute: temperature_sensor.value
    events:
      "shellies/%topic%/ext_temperature/%channel%":
        "temperature_sensor.value":
          expr: 'float(payload)'
        "temperature_sensor.units": "C"

  # Shelly with external humidity sensor
  shelly_exthumidity:
    type: ValueSensor
    capabilities: ['humidity_sensor']
    primary_attribute: humidity_sensor.value
    events:
      "shellies/%topic%/ext_humidity/%channel%":
        "humidity_sensor.value":
          expr: 'float(payload)'
        "humidity_sensor.units": "%"

  # Shelly relay with power meter
  shelly_relay_power:
    type: Switch
    capabilities: ['power_switch', 'toggle', 'power_sensor', 'energy_sensor']
    primary_attribute: power_switch.state
    events:
      "shellies/%topic%/relay/%channel%":
        "power_switch.state":
          expr: 'payload == "on"'
      "shellies/%topic%/relay/%channel%/power":
        "power_sensor.value":
          expr: 'float(payload)'
        "power_sensor.units": "W"
      "shellies/%topic%/relay/%channel%/energy":
        "energy_sensor.value":
          expr: 'round(float(payload) / 0.06, 4)' # value / 60 / 1000
        "energy_sensor.units": "KWH"
    actions:
      power_switch:
        "on":
          topic: "shellies/%topic%/relay/%channel%/command"
          payload: "on"
        "off":
          topic: "shellies/%topic%/relay/%channel%/command"
          payload: "off"
        set:
          topic: "shellies/%topic%/relay/%channel%/command"
          payload:
            expr: "parameters.state ? 'on' : 'off'"
            type: raw
      # toggle.toggle is implemented by the default handler in MQTTController

  # tasmota with pressure sensor
  tasmota_sensor_pressure:
    type: ValueSensor
    capabilities: [value_sensor]
    primary_attribute: value_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "value_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Pressure'
        "value_sensor.units":
          json_payload: true
          if_expr: '! isnull( payload?.PressureUnit )'
          expr: payload.TempUnit

  # tasmota with illuminance
  tasmota_sensor_illuminance:
    type: ValueSensor
    capabilities: [light_sensor]
    primary_attribute: light_sensor.value
    events:
      "tele/%topic%/SENSOR":
        "light_sensor.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Illuminance'
        "x_mqtt_tasmota_ir.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.IR'
        "x_mqtt_tasmota_broadband.value":
          json_payload: true
          if_expr: '! isnull( payload?[ source ?? "Global" ] )'
          expr: 'payload[ source ?? "Global" ]?.Broadband'